register fptype q = - M_SQRT1_2;
register fptype h = 0.5;
for (int i=0; i<set_num; i++){

   register fptype s = args[i].s;
   register fptype x =  args[i].strike;
   register fptype r = args[i].r;
   register fptype v =  args[i].v;
   register fptype t = args[i].t;
   int xType = args[i].OptionType;
   register fptype d;

   r = r*t;

   t = sqrtf(t);

   d = -r;

   v = v*t;

   t = s/x;

   t = logf(t);

   d = expf(d);

   t = t+r;

   t = t/v;

   v = v*h;

   d = d*x;

   x = t+v;

   t = t-v;

   x = x*q;

   t = t*q;

   x = erfcf(x);

   t = erfcf(t);

   x = x*h;

   t = t*h;


   if (xType == 'P'){
      x = 1-x;
      t = 1-t;
   }

   s = s*x;
   d = d*t;
   x = s-d;

   if (xType == 'P'){
     x = -x;
   }

   result[i] =  x;

}

 
 
 
 
register fptype q = - M_SQRT1_2;
register fptype h = 0.5;
for (int i=0; i<set_num; i+=5){

    register fptype s = args[i].s;
    register fptype s1 = args[i+1].s;
    register fptype s2 = args[i+2].s;
    register fptype s3 = args[i+3].s;
    register fptype s4 = args[i+4].s;

    register fptype x =  args[i].strike;
    register fptype x1 =  args[i+1].strike;
    register fptype x2 =  args[i+2].strike;
    register fptype x3 =  args[i+3].strike;
    register fptype x4 =  args[i+4].strike;

    register fptype r = args[i].r;
    register fptype r1 = args[i+1].r;
    register fptype r2 = args[i+2].r;
    register fptype r3 = args[i+3].r;
    register fptype r4 = args[i+4].r;

    register fptype v =  args[i].v;
    register fptype v1 =  args[i+1].v;
    register fptype v2 =  args[i+2].v;
    register fptype v3 =  args[i+3].v;
    register fptype v4 =  args[i+4].v;

    register fptype t = args[i].t;
    register fptype t1 = args[i+1].t;
    register fptype t2 = args[i+2].t;
    register fptype t3 = args[i+3].t;
    register fptype t4 = args[i+4].t;

    int xType = args[i].OptionType;
    int xType1 = args[i+1].OptionType;
    int xType2 = args[i+2].OptionType;
    int xType3 = args[i+3].OptionType;
    int xType4 = args[i+4].OptionType;

    register fptype d;
    register fptype d1;
    register fptype d2;
    register fptype d3;
    register fptype d4;

    r = r*t;
    r1 = r1*t1;
    r2 = r2*t2;
    r3 = r3*t3;
    r4 = r4*t4;

    t = sqrtf(t);
    t1 = sqrtf(t1);
    t2 = sqrtf(t2);
    t3 = sqrtf(t3);
    t4 = sqrtf(t4);

    d = -r;
    d1 = -r1;
    d2 = -r2;
    d3 = -r3;
    d4 = -r4;

    v = v*t;
    v1 = v1*t1;
    v2 = v2*t2;
    v3 = v3*t3;
    v4 = v4*t4;

    t = s/x;
    t1 = s1/x1;
    t2 = s2/x2;
    t3 = s3/x3;
    t4 = s4/x4;

    t = logf(t);
    t1 = logf(t1);
    t2 = logf(t2);
    t3 = logf(t3);
    t4 = logf(t4);

    d = expf(d);
    d1 = expf(d1);
    d2 = expf(d2);
    d3 = expf(d3);
    d4 = expf(d4);

    t = t+r;
    t1 = t1+r1;
    t2 = t2+r2;
    t3 = t3+r3;
    t4 = t4+r4;

    t = t/v;
    t1 = t1/v1;
    t2 = t2/v2;
    t3 = t3/v3;
    t4 = t4/v4;

    v = v*h;
    v1 = v1*h;
    v2 = v2*h;
    v3 = v3*h;
    v4 = v4*h;

    d = d*x;
    d1 = d1*x1;
    d2 = d2*x2;
    d3 = d3*x3;
    d4 = d4*x4;

    x = t+v;
    x1 = t1+v1;
    x2 = t2+v2;
    x3 = t3+v3;
    x4 = t4+v4;

    t = t-v;
    t1 = t1-v1;
    t2 = t2-v2;
    t3 = t3-v3;
    t4 = t4-v4;

    x = x*q;
    x1 = x1*q;
    x2 = x2*q;
    x3 = x3*q;
    x4 = x4*q;

    t = t*q;
    t1 = t1*q;
    t2 = t2*q;
    t3 = t3*q;
    t4 = t4*q;

    x = erfcf(x);
    x1 = erfcf(x1);
    x2 = erfcf(x2);
    x3 = erfcf(x3);
    x4 = erfcf(x4);

    t = erfcf(t);
    t1 = erfcf(t1);
    t2 = erfcf(t2);
    t3 = erfcf(t3);
    t4 = erfcf(t4);

    x = x*h;
    x1 = x1*h;
    x2 = x2*h;
    x3 = x3*h;
    x4 = x4*h;

    t = t*h;
    t1 = t1*h;
    t2 = t2*h;
    t3 = t3*h;
    t4 = t4*h;

    if (xType == 'P'){
      x = 1-x;
      t = 1-t;
    }
    if (xType1 == 'P'){
      x1 = 1-x1;
      t1 = 1-t1;
    }
    if (xType2 == 'P'){
      x2 = 1-x2;
      t2 = 1-t2;
    }
    if (xType3 == 'P'){
      x3 = 1-x3;
      t3 = 1-t3;
    }
    if (xType4 == 'P'){
      x4 = 1-x4;
      t4 = 1-t4;
    }

    s = s*x;
    s1 = s1*x1;
    s2 = s2*x2;
    s3 = s3*x3;
    s4 = s4*x4;

    d = d*t;
    d1 = d1*t1;
    d2 = d2*t2;
    d3 = d3*t3;
    d4 = d4*t4;

    x = s-d;
    x1 = s1-d1;
    x2 = s2-d2;
    x3 = s3-d3;
    x4 = s4-d4;

    if (xType == 'P'){
      x = -x;
    }
    if (xType1 == 'P'){
      x1 = -x1;
    }
    if (xType2 == 'P'){
      x2 = -x2;
    }
    if (xType3 == 'P'){
      x3 = -x3;
    }
    if (xType4 == 'P'){
      x4 = -x4;
    }

    result[i] =  x;
    result[i+1] =  x1;
    result[i+2] =  x2;
    result[i+3] =  x3;
    result[i+4] =  x4;

} 
 
 
 
 
 
 
 
