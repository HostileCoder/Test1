/*
   register fptype q = M_SQRT1_2;
   for (int i=0; i<set_num; i+=10){
       register fptype s = args[i].s;
       register fptype s1 = args[i+1].s;
       register fptype s2 = args[i+2].s;
       register fptype s3 = args[i+3].s;
       register fptype s4 = args[i+4].s;
       register fptype s5 = args[i+5].s;
       register fptype s6 = args[i+6].s;
       register fptype s7 = args[i+7].s;
       register fptype s8 = args[i+8].s;
       register fptype s9 = args[i+9].s;

       register fptype x =  args[i].strike;
       register fptype x1 =  args[i+1].strike;
       register fptype x2 =  args[i+2].strike;
       register fptype x3 =  args[i+3].strike;
       register fptype x4 =  args[i+4].strike;
       register fptype x5 =  args[i+5].strike;
       register fptype x6 =  args[i+6].strike;
       register fptype x7 =  args[i+7].strike;
       register fptype x8 =  args[i+8].strike;
       register fptype x9 =  args[i+9].strike;

       register fptype r = args[i].r;
       register fptype r1 = args[i+1].r;
       register fptype r2 = args[i+2].r;
       register fptype r3 = args[i+3].r;
       register fptype r4 = args[i+4].r;
       register fptype r5 = args[i+5].r;
       register fptype r6 = args[i+6].r;
       register fptype r7 = args[i+7].r;
       register fptype r8 = args[i+8].r;
       register fptype r9 = args[i+9].r;

       register fptype v =  args[i].v;
       register fptype v1 =  args[i+1].v;
       register fptype v2 =  args[i+2].v;
       register fptype v3 =  args[i+3].v;
       register fptype v4 =  args[i+4].v;
       register fptype v5 =  args[i+5].v;
       register fptype v6 =  args[i+6].v;
       register fptype v7 =  args[i+7].v;
       register fptype v8 =  args[i+8].v;
       register fptype v9 =  args[i+9].v;


       register fptype t = args[i].t;
       register fptype t1 = args[i+1].t;
       register fptype t2 = args[i+2].t;
       register fptype t3 = args[i+3].t;
       register fptype t4 = args[i+4].t;
       register fptype t5 = args[i+5].t;
       register fptype t6 = args[i+6].t;
       register fptype t7 = args[i+7].t;
       register fptype t8 = args[i+8].t;
       register fptype t9 = args[i+9].t;


       register fptype d;
       register fptype d1;
       register fptype d2;
       register fptype d3;
       register fptype d4;
       register fptype d5;
       register fptype d6;
       register fptype d7;
       register fptype d8;
       register fptype d9;

       register fptype l;
       register fptype l1;
       register fptype l2;
       register fptype l3;
       register fptype l4;
       register fptype l5;
       register fptype l6;
       register fptype l7;
       register fptype l8;
       register fptype l9;


       int xType = args[i].OptionType;
       int xType1 = args[i+1].OptionType;
       int xType2 = args[i+2].OptionType;
       int xType3 = args[i+3].OptionType;
       int xType4 = args[i+4].OptionType;
       int xType5 = args[i+5].OptionType;
       int xType6 = args[i+6].OptionType;
       int xType7 = args[i+7].OptionType;
       int xType8 = args[i+8].OptionType;
       int xType9 = args[i+9].OptionType;


       l = logf (s/x); //l = log (s/x);
       l1 = logf (s1/x1);
       l2 = logf (s2/x2);
       l3 = logf (s3/x3);
       l4 = logf (s4/x4); //l = log (s/x);
       l5 = logf (s5/x5);
       l6 = logf (s6/x6);
       l7 = logf (s7/x7);
       l8 = logf (s8/x8); //l = log (s/x);
       l9 = logf (s9/x9);


       d = v*v;
       d1 = v1*v1;
       d2 = v2*v2;
       d3 = v3*v3;
       d4 = v4*v4;
       d5 = v5*v5;
       d6 = v6*v6;
       d7 = v7*v7;
       d8 = v8*v8;
       d9 = v9*v9;

       d = d*0.5;
       d1 = d1*0.5;
       d2 = d2*0.5;
       d3 = d3*0.5;
       d4 = d4*0.5;
       d5 = d5*0.5;
       d6 = d6*0.5;
       d7 = d7*0.5;
       d8 = d8*0.5;
       d9 = d9*0.5;


       d = d + r;
       d1 = d1 + r1;
       d2 = d2 + r2;
       d3 = d3 + r3;
       d4 = d4 + r4;
       d5 = d5 + r5;
       d6 = d6 + r6;
       d7 = d7 + r7;
       d8 = d8 + r8;
       d9 = d9 + r9;


       d = d*t;
       d1 = d1*t1;
       d2 = d2*t2;
       d3 = d3*t3;
       d4 = d4*t4;
       d5 = d5*t5;
       d6 = d6*t6;
       d7 = d7*t7;
       d8 = d8*t8;
       d9 = d9*t9;


       d = d + l;   // d = ln + ( r+(0.5*v^2) )*t
       d1 = d1 + l1;
       d2 = d2 + l2;
       d3 = d3 + l3;
       d4 = d4 + l4;   // d = ln + ( r+(0.5*v^2) )*t
       d5 = d5 + l5;
       d6 = d6 + l6;
       d7 = d7 + l7;
       d8 = d8 + l8;   // d = ln + ( r+(0.5*v^2) )*t
       d9 = d9 + l9;


       l = -r*t;
       l1 = -r1*t1;
       l2 = -r2*t2;
       l3 = -r3*t3;
       l4 = -r4*t4;
       l5 = -r5*t5;
       l6 = -r6*t6;
       l7 = -r7*t7;
       l8 = -r8*t8;
       l9 = -r9*t9;


       l = expf(l); // l = exp(-rt);
       l1 = expf(l1);
       l2 = expf(l2);
       l3 = expf(l3);
       l4 = expf(l4); // l = exp(-rt);
       l5 = expf(l5);
       l6 = expf(l6);
       l7 = expf(l7);
       l8 = expf(l8); // l = exp(-rt);
       l9 = expf(l9);


       t = sqrt(t);
       t1 = sqrt(t1);
       t2 = sqrt(t2);
       t3 = sqrt(t3);
       t4 = sqrt(t4);
       t5 = sqrt(t5);
       t6 = sqrt(t6);
       t7 = sqrt(t7);
       t8 = sqrt(t8);
       t9 = sqrt(t9);


       t = t*v;     // t = sqrt(t)*v
       t1 = t1*v1;
       t2 = t2*v2;
       t3 = t3*v3;
       t4 = t4*v4;     // t = sqrt(t)*v
       t5 = t5*v5;
       t6 = t6*v6;
       t7 = t7*v7;
       t8 = t8*v8;     // t = sqrt(t)*v
       t9 = t9*v9;


       d = d/t;     // d = ( d * rsqrt(2) ) /   -sqrt(t)*v
       d1 = d1/t1;
       d2 = d2/t2;
       d3 = d3/t3;
       d4 = d4/t4;     // d = ( d * rsqrt(2) ) /   -sqrt(t)*v
       d5 = d5/t5;
       d6 = d6/t6;
       d7 = d7/t7;
       d8 = d8/t8;     // d = ( d * rsqrt(2) ) /   -sqrt(t)*v
       d9 = d9/t9;


       l = l*x;     // l = x*exp(-rt)
       l1 = l1*x1;
       l2 = l2*x2;
       l3 = l3*x3;
       l4 = l4*x4;     // l = x*exp(-rt)
       l5 = l5*x5;
       l6 = l6*x6;
       l7 = l7*x7;
       l8 = l8*x8;     // l = x*exp(-rt)
       l9 = l9*x9;


       x = d;
       x1 = d1;
       x2 = d2;
       x3 = d3;
       x4 = d4;
       x5 = d5;
       x6 = d6;
       x7 = d7;
       x8 = d8;
       x9 = d9;


       x = -x*q;
       x1 = -x1*q;
       x2 = -x2*q;
       x3 = -x3*q;
       x4 = -x4*q;
       x5 = -x5*q;
       x6 = -x6*q;
       x7 = -x7*q;
       x8 = -x8*q;
       x9 = -x9*q;


       r = erfcf(x);
       r1 = erfcf(x1);
       r2 = erfcf(x2);
       r3 = erfcf(x3);
       r4 = erfcf(x4);
       r5 = erfcf(x5);
       r6 = erfcf(x6);
       r7 = erfcf(x7);
       r8 = erfcf(x8);
       r9 = erfcf(x9);


       v = d - t ;  //v = d2
       v1 = d1 - t1 ;
       v2 = d2 - t2 ;
       v3 = d3 - t3 ;
       v4 = d4 - t4 ;  //v = d2
       v5 = d5 - t5 ;
       v6 = d6 - t6 ;
       v7 = d7 - t7 ;
       v8 = d8 - t8 ;  //v = d2
       v9 = d9 - t9 ;

       v = -v*q;    //v = -d2*rsqrt(2);
       v1 = -v1*q;
       v2 = -v2*q;
       v3 = -v3*q;
       v4 = -v4*q;    //v = -d2*rsqrt(2);
       v5 = -v5*q;
       v6 = -v6*q;
       v7 = -v7*q;
       v8 = -v8*q;    //v = -d2*rsqrt(2);
       v9 = -v9*q;

       v = erfcf(v);
       v1 = erfcf(v1);
       v2 = erfcf(v2);
       v3 = erfcf(v3);
       v4 = erfcf(v4);
       v5 = erfcf(v5);
       v6 = erfcf(v6);
       v7 = erfcf(v7);
       v8 = erfcf(v8);
       v9 = erfcf(v9);

       r = r*0.5;
       r1 = r1*0.5;
       r2 = r2*0.5;
       r3 = r3*0.5;
       r4 = r4*0.5;
       r5 = r5*0.5;
       r6 = r6*0.5;
       r7 = r7*0.5;
       r8 = r8*0.5;
       r9 = r9*0.5;

       v = v*0.5;
       v1 = v1*0.5;
       v2 = v2*0.5;
       v3 = v3*0.5;
       v4 = v4*0.5;
       v5 = v5*0.5;
       v6 = v6*0.5;
       v7 = v7*0.5;
       v8 = v8*0.5;
       v9 = v9*0.5;


       if (xType == 'C') {
           t = (s * r) - (l *  v);
       } else {
           r = (1.0 - r);
           v = (1.0 - v);
           t = (l * v) - (s * r);
       }
       if (xType1 == 'C') {
           t1 = (s1 * r1) - (l1 *  v1);
       } else {
           r1 = (1.0 - r1);
           v1 = (1.0 - v1);
           t1 = (l1 * v1) - (s1 * r1);
       }
       if (xType2 == 'C') {
           t2 = (s2 * r2) - (l2 *  v2);
       } else {
           r2 = (1.0 - r2);
           v2 = (1.0 - v2);
           t2 = (l2 * v2) - (s2 * r2);
       }
       if (xType3 == 'C') {
           t3 = (s3 * r3) - (l3 *  v3);
       } else {
           r3 = (1.0 - r3);
           v3 = (1.0 - v3);
           t3 = (l3 * v3) - (s3 * r3);
       }
       if (xType4 == 'C') {
           t4 = (s4 * r4) - (l4 *  v4);
       } else {
           r4 = (1.0 - r4);
           v4 = (1.0 - v4);
           t4 = (l4 * v4) - (s4 * r4);
       }
       if (xType5 == 'C') {
           t5 = (s5 * r5) - (l5 *  v5);
       } else {
           r5 = (1.0 - r5);
           v5 = (1.0 - v5);
           t5 = (l5 * v5) - (s5 * r5);
       }
       if (xType6 == 'C') {
           t6 = (s6 * r6) - (l6 *  v6);
       } else {
           r6 = (1.0 - r6);
           v6 = (1.0 - v6);
           t6 = (l6 * v6) - (s6 * r6);
       }
       if (xType7 == 'C') {
           t7 = (s7 * r7) - (l7 *  v7);
       } else {
           r7 = (1.0 - r7);
           v7 = (1.0 - v7);
           t7 = (l7 * v7) - (s7 * r7);
       }
       if (xType8 == 'C') {
           t8 = (s8 * r8) - (l8 *  v8);
       } else {
           r8 = (1.0 - r8);
           v8 = (1.0 - v8);
           t8 = (l8 * v8) - (s8 * r8);
       }
       if (xType9 == 'C') {
           t9 = (s9 * r9) - (l9 *  v9);
       } else {
           r9 = (1.0 - r9);
           v9 = (1.0 - v9);
           t9 = (l9 * v9) - (s9 * r9);
       }


       result[i] =   t;
       result[i+1] =   t1;
       result[i+2] =   t2;
       result[i+3] =   t3;
       result[i+4] =   t4;
       result[i+5] =   t5;
       result[i+6] =   t6;
       result[i+7] =   t7;
       result[i+8] =   t8;
       result[i+9] =   t9;
   }

   */


